[{"categories":["k8s","docker"],"content":"harbor同步的那些事 ","date":"2023-04-09","objectID":"/posts/harbor-sync/:0:0","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"几个同步方案的对比 harbor镜像复制 skopeo image-syncer 手工 机制 基于策略的内容实现：支持多种过滤与多种触发模式且实现对推送或拉模式的支持 直接将blob复制到另一个 1.同步只经过内存和网络，不依赖磁盘，同步速度快2.支持增量同步3.支持并发同步4.支持自动重试机制 拷贝镜像数据+导入导出PG数据库数据 官方文档 Harbor docs | Configuring Replication (goharbor.io) https://github.com/containers/skopeo https://github.com/AliyunContainerService/image-syncer 优点 界面配置，无需编码 1.单机和高可用harbor都可用 2.传输效率高，不依赖docker 1.传输效率高2.高可用支持 耗时短 缺点 失败率较高 centos7默认版本低 数据存储拷贝依赖cp ","date":"2023-04-09","objectID":"/posts/harbor-sync/:1:0","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"harbor image规范 docker image url (registry/namespace/repository:tag) #例子 harbor.abc-test.com/demo/nginx:v1 实际操作中很多公司在repository很多会有很多/ 例如harbor.abc-test.com/demo/prod/nginx:v1 你理解成这样harbor.abc-test.com/demo/\"prod/nginx\":v1 统一下这个规范后面讲到的会与这个有关！ ","date":"2023-04-09","objectID":"/posts/harbor-sync/:2:0","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"harbor实践案例 ","date":"2023-04-09","objectID":"/posts/harbor-sync/:3:0","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"背景介绍 因为组织关系原因，集团下有很多分公司，每个公司又有技术人员搭建了各自的harbor，甚至很多人每个项目搭建一个harbor，这样公司没有统一的harbor镜像仓库，维护的harbor又是散乱，资源又很浪费。 ","date":"2023-04-09","objectID":"/posts/harbor-sync/:3:1","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"方案实践踩坑 实际上如果harbor自带的镜像复制应该是非常好的功能，但是我用下来发现失败率比较高，并且1.0和2.0版本应该是无法直接使用的。 手工的这种方案因为我这里是要把多个harbor实例的内容合并到一个harbor所以也不适用 skopeo和image-syncer我都用了下，但是一个很疑惑的就是为什么不能根据namespace迁移，而需要repository级别才能迁移，并且repository有些也迁移失败！ ","date":"2023-04-09","objectID":"/posts/harbor-sync/:3:2","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"最终方案 自己结合harbor 2.0的api，获取老harbor的namespace，然后调用新的harbor创建新的namespace， 获取repository，利用docker pull tag push推送该repository下的第一个镜像，然后剩下的利用image-syncer一次性同步该repository。 目录准备 #mkdir -p /usr/local/image-syncer/ #cd /usr/local/image-syncer/ #ll -rw-r----- 1 root root 325 Apr 7 14:31 auth.json -rw-r----- 1 root root 83 Apr 7 14:41 images.json -rw-r----- 1 root root 105 Apr 7 14:32 images.json.template -rwxr-x--- 1 root root 14913281 Apr 6 11:20 image-syncer -rw-r----- 1 root root 3049 Apr 7 14:43 sync-image-cf.sh #auth.json 是image-syncer对应的权限文件 cat auth.json { \"harbor.abc-test.com\": { \"username\": \"admin\", \"password\": \"Harbor12345\" }, \"harbor1.abc-test.com\": { \"username\": \"admin\", \"password\": \"Harbor12345\" } } #images.json 是image-syncer的镜像申明文件 cat images.json { \"harbor.abc-test.com/basic/jdk\": \"harbor.abc-test.com/basic/jdk\" } #images.json.template 是我建立的文件，后面脚本会用到 #namespace-repository可以理解为我写的一个变量，后面利用这个变量去替换每一个namespace/repository的组合来达到循环同步的目的 { \"harbor1.abc-test.com/namespace-repository\": \"harbor.abc-test.com/namespace-repository\" } #image-syncer是阿里云image-syncer的脚本文件 具体参考https://github.com/AliyunContainerService/image-syncer/releases/tag 下载对应的release解压即可 #sync-image-cf.sh是我结合自己的业务完成的脚本 sync-image-cf.sh说明 #!/bin/bash old_harbor=\"harbor1.abc-test.com\" new_harbor=\"harbor.abc-test.com\" old_admin=\"Harbor12345\" new_admin=\"Harbor12345\" #1. 获取老的harbor namespace/repository清单 for i in `curl -u \"admin:$old_admin\" http://$old_harbor/v2/_catalog 2\u003e/dev/null | jq .repositories[] | tr -d '\"' \"`;do project_name=`echo \"$i\" | awk -F\"/\" '{print $1}'` echo \"======start project/repository:$i=============\" #调用api创建project curl -u \"admin:$new_admin\" -X POST -H \"Content-Type: application/json\" \"https://$new_harbor/api/v2.0/projects\" -d \"{\\\"project_name\\\":\\\"$project_name\\\"}\" #获取tags tags=`curl -u \"admin:$old_admin\" http://$old_harbor/v2/\"$i\"/tags/list 2\u003e/dev/null|jq \".tags[]\"|tr -d '\"'` for j in `echo $tags`;do echo \"===start pulling $old_harbor/$i:$j==\" docker pull $old_harbor/$i:$j; echo \"===start tag $new_harbor/$i:$j==\" docker tag $old_harbor/$i:$j $new_harbor/$i:$j; echo \"===start push $new_harbor/$i:$j==\" docker push $new_harbor/$i:$j echo \"===start sync $new_harbor/$i:allin========\" #image-syncer 全量同步一次 #1. 替换images.json文件 # \"harbor1.abc-test.com/namespace-repository\": \"harbor.abc-test.com/namespace-repository cp -f /usr/local/image-syncer/images.json.template /usr/local/image-syncer/images.json sed -i \"s%namespace-repository%$i%g\" /usr/local/image-syncer/images.json /usr/local/image-syncer/image-syncer --proc=6 --auth=/usr/local/image-syncer/auth.json --images=/usr/local/image-syncer/images.json --auth /root/.docker/config.json done done ","date":"2023-04-09","objectID":"/posts/harbor-sync/:3:3","tags":["harbor"],"title":"Harbor Sync","uri":"/posts/harbor-sync/"},{"categories":["k8s","docker"],"content":"harbor高可用实现 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:0:0","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"高可用简介 harbor当前两种主流高可用方案： 多harbor实例共享后端存储 双主复制，harbor自带的镜像复制功能 方案一简图： 方案二简图： 双主复制架构在遇到大镜像时也有同步延迟，并且如果一个实例出现故障需要重新开启复制策略才能再次同步。实际使用下来发现自带的复制功能也不稳定。 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:1:0","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"多harbor实例共享后端存储实现 该方案需要注意以下几点： 共享存储的选取，Harbor的后端存储目前支持本地文件系统、NFS、CephFS、azure、gcs、AWS s3,、swift 以及阿里云oss。 Session在不同的实例上共享，在2.6.2的版本中发现需要在LB层开启ip hash,否则无法登录。 由于PostgreSQL多个实例无法共享一份数据文件，需要将harbor中的数据库拆出来独立部署，让多实例共用一个外部数据库，并将Harbor中默认创建在PostgreSQL的所有表的结构、初始数据等导入进单独部署的PostgreSQL服务中，PostgreSQL数据的冗余可以使用PostgreSQL的同步策略来实现。 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:0","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"资源清单 资源类型 数量 配置 ECS实例 2 centos7 2c4g NAS实例 1 支持nfs RDS实例 1 pg10 1c4g REDIS实例 1 1c1g LB实例 1 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:1","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"准备 PostgreSQL(10) #安装客户端 sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm yum install -y postgresql11-server #连接数据库 psql -h postgresql10.rdsgxtki0z54moh.agilecloud.com -U postgresadmin -p 3306 -d postgres #创建对应的库 下面是展示，具体执行create database xx即可 pg默认安装的库可以不用管它。 postgres=\u003e \\l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges ----------------+---------------+----------+-------------+-------------+------------------- notary_servers | postgresadmin | UTF8 | zh_CN.utf-8 | zh_CN.utf-8 | notary_signer | postgresadmin | UTF8 | zh_CN.utf-8 | zh_CN.utf-8 | registry | postgresadmin | UTF8 | zh_CN.utf-8 | zh_CN.utf-8 | ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:2","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"准备Redis（6.0） 云平台执行购买高可用的，获取一下对应的连接地址和密码即可。 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:3","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"挂载共享存储(两台ecs都需同样操作） [root@cf ~]#yum install nfs-utils [root@cf ~]#echo \"options sunrpc tcp_slot_table_entries=128\" \u003e\u003e /etc/modprobe.d/sunrpc.conf [root@cf ~]#echo \"options sunrpc tcp_max_slot_table_entries=128\" \u003e\u003e /etc/modprobe.d/sunrpc.conf [root@cf ~]#mkdir /data [root@cf ~]#mount -t nfs4 -o minorversion=1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport xx.xx.com:/ /data #参考对应云挂载nas的路径 [root@cf ~]# df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 2.0G 0 2.0G 0% /dev tmpfs 2.0G 64K 2.0G 1% /dev/shm tmpfs 2.0G 2.0M 2.0G 1% /run tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup /dev/vda1 40G 6.7G 31G 18% / tmpfs 394M 0 394M 0% /run/user/0 /dev/vdb1 99G 1.2G 93G 2% /DISK2 xx.xx.com:/ 1.0P 70G 1.0P 1% /data #重点 #注意这里自己设置到/etc/fstab开机自动挂载吧 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:4","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"harbor安装 docker基础安装 #移除老的docker sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine #配置docker安装的yum源 sudo yum install -y yum-utils sudo yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #安装docker sudo yum install -y docker-ce docker-ce-cli containerd.io #启动 systemctl enable docker --now #配置加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u003c\u003c-'EOF' { \"registry-mirrors\": [\"https://xxxx.mirror.aliyuncs.com\"],#这一段改成自己的吧！ \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"data-root\": \"/DISK2/docker\",#注意这里，后面会单独挂个数据盘 \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF sudo systemctl daemon-reload sudo systemctl restart docker 注意新版的docker安装会把docker-compose也安装上。 [root@cf ~]# docker info | grep compose compose: Docker Compose (Docker Inc.) Path: /usr/libexec/docker/cli-plugins/docker-compose 如果没有对应docker-compose，可以自行安装，参考baidu吧 安装harbor（两台ecs都需同样操作） [root@cf ~]#tar xzvf harbor-online-installer-v2.6.2.tgz -C /usr/local/ [root@cf ~]#cd harbor/ [root@cf ~]#cp harbor.yml.tmpl harbor.yml cat harbor.yml hostname: harbor.abc-test.com http: port: 80 external_url: https://harbor.abc-test.com harbor_admin_password: Harbor12345 data_volume: /data/harbor #这个就是nas挂载的具体路径 一定记得改 external_database: harbor: host: postgresql10.xx.xx port: 3306 db_name: registry username: postgresadmin你设定的用户名 password: 你自己的密码 ssl_mode: disable max_idle_conns: 10 max_open_conns: 500 notary_signer: host: postgresql10.xx.xx port: 3306 db_name: notarysigner username: postgresadmin你设定的用户名 password: 你自己的密码 ssl_mode: disable notary_server: host: postgresql10.xx.xx port: 3306 db_name: notaryserver username: postgresadmin你设定的用户名 password: 你自己的密码 ssl_mode: disable external_redis: host: xx.xx.xx:6379 password: redisxxxx registry_db_index: 1 jobservice_db_index: 2 chartmuseum_db_index: 3 trivy_db_index: 5 idle_timeout_seconds: 30 metric: enabled: true port: 9090 path: /metrics 注意我这里https这一层是设置在lb的，往harbor转的时候转的是http。但是这里的external_url一定要设置你真正外网想要访问的url cd /usr/local/harbor ./install.sh ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:2:5","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"lb配置 主要目的就是 https://harbor.abc-test.com =》 后端两台实例的harbor80端口,域名证书都在lb上操作。 注意这里一定记得lb开启ip hash。 此次省略域名解析操作。 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:3:0","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"测试 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:4:0","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"登录harbor仓库 # docker login harbor.abc-test.com Username: admin Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:4:1","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"上传镜像 [root@master ~]# docker push harbor.abc-test.com/library/nginx Using default tag: latest The push refers to repository [registry.cloudcele.com/library/nginx] d9eb91d66e2a: Pushed ae1f545e4c08: Pushed c20672db3628: Pushed 4cbb728cd302: Pushing [=\u003e ] 1.609MB/63.74MB 4cbb728cd302: Pushed 9eb82f04c782: Pushed latest: digest: sha256:1a53eb723d17523512bd25c27299046cfa034cce309f4ed330c943a304513f59 size: 1362 ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:4:2","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["k8s","docker"],"content":"拉取镜像 [root@master ~]# docker pull harbor.abc-test.com/library/nginx Using default tag: latest latest: Pulling from library/nginx Digest: sha256:1a53eb723d17523512bd25c27299046cfa034cce309f4ed330c943a304513f59 harbor.abc-test.com/library/nginx:latest ","date":"2023-03-15","objectID":"/posts/harbor-ha20230408/:4:3","tags":["harbor"],"title":"harbor高可用","uri":"/posts/harbor-ha20230408/"},{"categories":["linux"],"content":"first test blog 近日，上海儿童医学中心与东华大学合作开发了一种多功能甘油水凝胶作为生物墨水， 其抑菌性、形状保真、适合3D生物打印和细胞冻存保护等一系列特性，为再生医学研究拓宽了前景， 该研究成果已经在权威期刊《Matter》在线发表。 Lighthouse (figure) \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2023-02-15","objectID":"/posts/first_post/:0:0","tags":["linux"],"title":"First_post","uri":"/posts/first_post/"}]